import * as React from "react";
import * as PropTypes from "prop-types";
declare type ReactText = string | number;
declare type ReactChild = React.ReactElement<unknown> | ReactText;
interface ChildrenArray extends Array<Children> {
}
declare type ReactFragment = ChildrenArray;
declare type Children = ReactChild | ReactFragment | boolean | null | undefined;
export declare type Overwrite<O1, O2> = Pick<O1, Exclude<keyof O1, keyof O2>> & O2;
declare type ElementProps = Omit<React.HTMLProps<HTMLElement>, "ref">;
declare type FlexViewProps = {
    /** FlexView content */
    children?: Children;
    /** flex-direction: column */
    column?: boolean;
    /** align content vertically */
    vAlignContent?: "top" | "center" | "bottom";
    /** align content horizontally */
    hAlignContent?: "left" | "center" | "right";
    /** margin-left property ("auto" to align self right) */
    marginLeft?: string | number;
    /** margin-top property ("auto" to align self bottom) */
    marginTop?: string | number;
    /** margin-right property ("auto" to align self left) */
    marginRight?: string | number;
    /** margin-bottom property ("auto" to align self top) */
    marginBottom?: string | number;
    /** grow property (for parent primary axis) */
    grow?: boolean | number;
    /** flex-shrink property */
    shrink?: boolean | number;
    /** flex-basis property */
    basis?: string | number;
    /** wrap content */
    wrap?: boolean;
    /** height property (for parent secondary axis) */
    height?: string | number;
    /** width property (for parent secondary axis) */
    width?: string | number;
    /** class to pass to top level element of the component */
    className?: string;
    /** style object to pass to top level element of the component */
    style?: React.CSSProperties;
    /** native dom component to render. Defaults to div */
    component?: keyof JSX.IntrinsicElements;
};
export declare namespace FlexView {
    type Props = Overwrite<ElementProps, FlexViewProps>;
}
export declare class FlexViewInternal extends React.Component<FlexView.Props & {
    componentRef?: React.Ref<HTMLElement>;
}> {
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        column: PropTypes.Requireable<boolean>;
        vAlignContent: PropTypes.Requireable<string>;
        hAlignContent: PropTypes.Requireable<string>;
        marginLeft: PropTypes.Requireable<string | number>;
        marginTop: PropTypes.Requireable<string | number>;
        marginRight: PropTypes.Requireable<string | number>;
        marginBottom: PropTypes.Requireable<string | number>;
        grow: PropTypes.Requireable<number | boolean>;
        shrink: PropTypes.Requireable<number | boolean>;
        basis: PropTypes.Requireable<string | number>;
        wrap: PropTypes.Requireable<boolean>;
        height: PropTypes.Requireable<string | number>;
        width: PropTypes.Requireable<string | number>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        component: PropTypes.Requireable<PropTypes.ReactComponentLike>;
    };
    componentDidMount(): void;
    logWarnings(): void;
    getGrow(): number;
    getShrink(): number;
    getBasis(): string;
    getStyle(): React.CSSProperties;
    getElementProps(): ElementProps & {
        [k in keyof FlexViewProps]?: never;
    };
    render(): React.DOMElement<{
        max?: string | number | undefined;
        required?: boolean | undefined;
        default?: boolean | undefined;
        high?: number | undefined;
        low?: number | undefined;
        disabled?: boolean | undefined;
        start?: number | undefined;
        open?: boolean | undefined;
        media?: string | undefined;
        hidden?: boolean | undefined;
        cite?: string | undefined;
        data?: string | undefined;
        dir?: string | undefined;
        form?: string | undefined;
        label?: string | undefined;
        slot?: string | undefined;
        span?: number | undefined;
        style: React.CSSProperties;
        summary?: string | undefined;
        title?: string | undefined;
        pattern?: string | undefined;
        async?: boolean | undefined;
        defer?: boolean | undefined;
        manifest?: string | undefined;
        color?: string | undefined;
        content?: string | undefined;
        size?: number | undefined;
        wrap?: undefined;
        multiple?: boolean | undefined;
        height?: undefined;
        translate?: "yes" | "no" | undefined;
        width?: undefined;
        prefix?: string | undefined;
        src?: string | undefined;
        children: string | number | boolean | (string & {}) | (number & {}) | React.ReactElement<unknown, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | ChildrenArray | (string & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (string & React.ReactNodeArray) | (string & React.ReactPortal) | (number & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (number & React.ReactNodeArray) | (number & React.ReactPortal) | (false & {}) | (false & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (false & React.ReactNodeArray) | (false & React.ReactPortal) | (true & {}) | (true & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (true & React.ReactNodeArray) | (true & React.ReactPortal) | (React.ReactElement<unknown, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & string) | (React.ReactElement<unknown, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & number) | (React.ReactElement<unknown, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & false) | (React.ReactElement<unknown, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & true) | (React.ReactElement<unknown, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (React.ReactElement<unknown, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & React.ReactNodeArray) | (React.ReactElement<unknown, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> & React.ReactPortal) | (ChildrenArray & string) | (ChildrenArray & number) | (ChildrenArray & false) | (ChildrenArray & true) | (ChildrenArray & React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | (ChildrenArray & React.ReactNodeArray) | (ChildrenArray & React.ReactPortal) | null | undefined;
        key?: string | number | null | undefined;
        list?: string | undefined;
        step?: string | number | undefined;
        accept?: string | undefined;
        acceptCharset?: string | undefined;
        action?: string | undefined;
        allowFullScreen?: boolean | undefined;
        allowTransparency?: boolean | undefined;
        alt?: string | undefined;
        as?: string | undefined;
        autoComplete?: string | undefined;
        autoFocus?: boolean | undefined;
        autoPlay?: boolean | undefined;
        capture?: string | boolean | undefined;
        cellPadding?: string | number | undefined;
        cellSpacing?: string | number | undefined;
        charSet?: string | undefined;
        challenge?: string | undefined;
        checked?: boolean | undefined;
        classID?: string | undefined;
        cols?: number | undefined;
        colSpan?: number | undefined;
        controls?: boolean | undefined;
        coords?: string | undefined;
        crossOrigin?: string | undefined;
        dateTime?: string | undefined;
        download?: any;
        encType?: string | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        frameBorder?: string | number | undefined;
        headers?: string | undefined;
        href?: string | undefined;
        hrefLang?: string | undefined;
        htmlFor?: string | undefined;
        httpEquiv?: string | undefined;
        integrity?: string | undefined;
        keyParams?: string | undefined;
        keyType?: string | undefined;
        kind?: string | undefined;
        loop?: boolean | undefined;
        marginHeight?: number | undefined;
        marginWidth?: number | undefined;
        maxLength?: number | undefined;
        mediaGroup?: string | undefined;
        method?: string | undefined;
        min?: string | number | undefined;
        minLength?: number | undefined;
        muted?: boolean | undefined;
        name?: string | undefined;
        nonce?: string | undefined;
        noValidate?: boolean | undefined;
        optimum?: number | undefined;
        placeholder?: string | undefined;
        playsInline?: boolean | undefined;
        poster?: string | undefined;
        preload?: string | undefined;
        readOnly?: boolean | undefined;
        rel?: string | undefined;
        reversed?: boolean | undefined;
        rows?: number | undefined;
        rowSpan?: number | undefined;
        sandbox?: string | undefined;
        scope?: string | undefined;
        scoped?: boolean | undefined;
        scrolling?: string | undefined;
        seamless?: boolean | undefined;
        selected?: boolean | undefined;
        shape?: string | undefined;
        sizes?: string | undefined;
        srcDoc?: string | undefined;
        srcLang?: string | undefined;
        srcSet?: string | undefined;
        target?: string | undefined;
        type?: string | undefined;
        useMap?: string | undefined;
        value?: string | number | readonly string[] | undefined;
        wmode?: string | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className: string | undefined;
        contentEditable?: boolean | "inherit" | "false" | "true" | undefined;
        contextMenu?: string | undefined;
        draggable?: boolean | "false" | "true" | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        spellCheck?: boolean | "false" | "true" | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "none" | "text" | "numeric" | "tel" | "url" | "email" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "false" | "true" | undefined;
        'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
        'aria-busy'?: boolean | "false" | "true" | undefined;
        'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "false" | "true" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "false" | "true" | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "false" | "true" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "false" | "true" | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "listbox" | "grid" | "false" | "true" | "tree" | undefined;
        'aria-hidden'?: boolean | "false" | "true" | undefined;
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: boolean | "false" | "true" | undefined;
        'aria-multiline'?: boolean | "false" | "true" | undefined;
        'aria-multiselectable'?: boolean | "false" | "true" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-readonly'?: boolean | "false" | "true" | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals" | undefined;
        'aria-required'?: boolean | "false" | "true" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "false" | "true" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: ((event: React.ClipboardEvent<HTMLElement>) => void) | undefined;
        onCopyCapture?: ((event: React.ClipboardEvent<HTMLElement>) => void) | undefined;
        onCut?: ((event: React.ClipboardEvent<HTMLElement>) => void) | undefined;
        onCutCapture?: ((event: React.ClipboardEvent<HTMLElement>) => void) | undefined;
        onPaste?: ((event: React.ClipboardEvent<HTMLElement>) => void) | undefined;
        onPasteCapture?: ((event: React.ClipboardEvent<HTMLElement>) => void) | undefined;
        onCompositionEnd?: ((event: React.CompositionEvent<HTMLElement>) => void) | undefined;
        onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLElement>) => void) | undefined;
        onCompositionStart?: ((event: React.CompositionEvent<HTMLElement>) => void) | undefined;
        onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLElement>) => void) | undefined;
        onCompositionUpdate?: ((event: React.CompositionEvent<HTMLElement>) => void) | undefined;
        onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLElement>) => void) | undefined;
        onFocus?: ((event: React.FocusEvent<HTMLElement>) => void) | undefined;
        onFocusCapture?: ((event: React.FocusEvent<HTMLElement>) => void) | undefined;
        onBlur?: ((event: React.FocusEvent<HTMLElement>) => void) | undefined;
        onBlurCapture?: ((event: React.FocusEvent<HTMLElement>) => void) | undefined;
        onChange?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onChangeCapture?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onBeforeInput?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onBeforeInputCapture?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onInput?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onInputCapture?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onReset?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onResetCapture?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onSubmit?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onSubmitCapture?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onInvalid?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onInvalidCapture?: ((event: React.FormEvent<HTMLElement>) => void) | undefined;
        onLoad?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onLoadCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onError?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onErrorCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onKeyDown?: ((event: React.KeyboardEvent<HTMLElement>) => void) | undefined;
        onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLElement>) => void) | undefined;
        onKeyPress?: ((event: React.KeyboardEvent<HTMLElement>) => void) | undefined;
        onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLElement>) => void) | undefined;
        onKeyUp?: ((event: React.KeyboardEvent<HTMLElement>) => void) | undefined;
        onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLElement>) => void) | undefined;
        onAbort?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onAbortCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onCanPlay?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onDurationChange?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onEmptied?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onEncrypted?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onEnded?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onEndedCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onLoadedData?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onLoadStart?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onPause?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onPauseCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onPlay?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onPlayCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onPlaying?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onPlayingCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onProgress?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onProgressCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onRateChange?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onSeeked?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onSeekedCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onSeeking?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onSeekingCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onStalled?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onStalledCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onSuspend?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onSuspendCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onTimeUpdate?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onVolumeChange?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onWaiting?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onWaitingCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onAuxClick?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onAuxClickCapture?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onClick?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onClickCapture?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onContextMenu?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onContextMenuCapture?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onDoubleClick?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onDoubleClickCapture?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onDrag?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragCapture?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragEnd?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragEndCapture?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragEnter?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragEnterCapture?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragExit?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragExitCapture?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragLeave?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragLeaveCapture?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragOver?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragOverCapture?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragStart?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDragStartCapture?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDrop?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onDropCapture?: ((event: React.DragEvent<HTMLElement>) => void) | undefined;
        onMouseDown?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseDownCapture?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseEnter?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseLeave?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseMove?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseMoveCapture?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseOut?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseOutCapture?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseOver?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseOverCapture?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseUp?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onMouseUpCapture?: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onSelect?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onSelectCapture?: ((event: React.SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onTouchCancel?: ((event: React.TouchEvent<HTMLElement>) => void) | undefined;
        onTouchCancelCapture?: ((event: React.TouchEvent<HTMLElement>) => void) | undefined;
        onTouchEnd?: ((event: React.TouchEvent<HTMLElement>) => void) | undefined;
        onTouchEndCapture?: ((event: React.TouchEvent<HTMLElement>) => void) | undefined;
        onTouchMove?: ((event: React.TouchEvent<HTMLElement>) => void) | undefined;
        onTouchMoveCapture?: ((event: React.TouchEvent<HTMLElement>) => void) | undefined;
        onTouchStart?: ((event: React.TouchEvent<HTMLElement>) => void) | undefined;
        onTouchStartCapture?: ((event: React.TouchEvent<HTMLElement>) => void) | undefined;
        onPointerDown?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerDownCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerMove?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerMoveCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerUp?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerUpCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerCancel?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerCancelCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerEnter?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerEnterCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerLeave?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerOver?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerOverCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerOut?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onPointerOutCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onGotPointerCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onLostPointerCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLElement>) => void) | undefined;
        onScroll?: ((event: React.UIEvent<HTMLElement, UIEvent>) => void) | undefined;
        onScrollCapture?: ((event: React.UIEvent<HTMLElement, UIEvent>) => void) | undefined;
        onWheel?: ((event: React.WheelEvent<HTMLElement>) => void) | undefined;
        onWheelCapture?: ((event: React.WheelEvent<HTMLElement>) => void) | undefined;
        onAnimationStart?: ((event: React.AnimationEvent<HTMLElement>) => void) | undefined;
        onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLElement>) => void) | undefined;
        onAnimationEnd?: ((event: React.AnimationEvent<HTMLElement>) => void) | undefined;
        onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLElement>) => void) | undefined;
        onAnimationIteration?: ((event: React.AnimationEvent<HTMLElement>) => void) | undefined;
        onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLElement>) => void) | undefined;
        onTransitionEnd?: ((event: React.TransitionEvent<HTMLElement>) => void) | undefined;
        onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLElement>) => void) | undefined;
        column?: undefined;
        vAlignContent?: undefined;
        hAlignContent?: undefined;
        marginLeft?: undefined;
        marginTop?: undefined;
        marginRight?: undefined;
        marginBottom?: undefined;
        grow?: undefined;
        shrink?: undefined;
        basis?: undefined;
        component?: undefined;
        ref: ((instance: HTMLElement | null) => void) | React.RefObject<HTMLElement> | null | undefined;
    }, HTMLElement>;
}
export declare const FlexView: React.ForwardRefExoticComponent<Pick<Pick<React.HTMLProps<HTMLElement>, "max" | "required" | "default" | "high" | "low" | "disabled" | "start" | "open" | "media" | "hidden" | "cite" | "data" | "dir" | "form" | "label" | "slot" | "span" | "style" | "summary" | "title" | "pattern" | "async" | "defer" | "manifest" | "color" | "content" | "size" | "wrap" | "multiple" | "height" | "translate" | "width" | "prefix" | "src" | "children" | "key" | "list" | "step" | "accept" | "acceptCharset" | "action" | "allowFullScreen" | "allowTransparency" | "alt" | "as" | "autoComplete" | "autoFocus" | "autoPlay" | "capture" | "cellPadding" | "cellSpacing" | "charSet" | "challenge" | "checked" | "classID" | "cols" | "colSpan" | "controls" | "coords" | "crossOrigin" | "dateTime" | "download" | "encType" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "frameBorder" | "headers" | "href" | "hrefLang" | "htmlFor" | "httpEquiv" | "integrity" | "keyParams" | "keyType" | "kind" | "loop" | "marginHeight" | "marginWidth" | "maxLength" | "mediaGroup" | "method" | "min" | "minLength" | "muted" | "name" | "nonce" | "noValidate" | "optimum" | "placeholder" | "playsInline" | "poster" | "preload" | "readOnly" | "rel" | "reversed" | "rows" | "rowSpan" | "sandbox" | "scope" | "scoped" | "scrolling" | "seamless" | "selected" | "shape" | "sizes" | "srcDoc" | "srcLang" | "srcSet" | "target" | "type" | "useMap" | "value" | "wmode" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "draggable" | "id" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture">, "max" | "required" | "default" | "high" | "low" | "disabled" | "start" | "open" | "media" | "hidden" | "cite" | "data" | "dir" | "form" | "label" | "slot" | "span" | "summary" | "title" | "pattern" | "async" | "defer" | "manifest" | "color" | "content" | "size" | "multiple" | "translate" | "prefix" | "src" | "key" | "list" | "step" | "accept" | "acceptCharset" | "action" | "allowFullScreen" | "allowTransparency" | "alt" | "as" | "autoComplete" | "autoFocus" | "autoPlay" | "capture" | "cellPadding" | "cellSpacing" | "charSet" | "challenge" | "checked" | "classID" | "cols" | "colSpan" | "controls" | "coords" | "crossOrigin" | "dateTime" | "download" | "encType" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "frameBorder" | "headers" | "href" | "hrefLang" | "htmlFor" | "httpEquiv" | "integrity" | "keyParams" | "keyType" | "kind" | "loop" | "marginHeight" | "marginWidth" | "maxLength" | "mediaGroup" | "method" | "min" | "minLength" | "muted" | "name" | "nonce" | "noValidate" | "optimum" | "placeholder" | "playsInline" | "poster" | "preload" | "readOnly" | "rel" | "reversed" | "rows" | "rowSpan" | "sandbox" | "scope" | "scoped" | "scrolling" | "seamless" | "selected" | "shape" | "sizes" | "srcDoc" | "srcLang" | "srcSet" | "target" | "type" | "useMap" | "value" | "wmode" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "draggable" | "id" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture"> & FlexViewProps & React.RefAttributes<HTMLElement>>;
export default FlexView;
